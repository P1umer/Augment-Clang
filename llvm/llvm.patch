diff --git a/lib/Option/OptTable.cpp b/lib/Option/OptTable.cpp
index 5833d03069f..faacdebcc01 100644
--- a/lib/Option/OptTable.cpp
+++ b/lib/Option/OptTable.cpp
@@ -389,11 +389,30 @@ Arg *OptTable::ParseOneArg(const ArgList &Args, unsigned &Index,
   return new Arg(getOption(TheUnknownOptionID), Str, Index++, Str);
 }
 
+using namespace std;
+// Option BlackList
+static vector<string> OptionBL{
+  "-O0",
+  "-O1",
+  "-O2",
+  "-O3",
+  "-O4",
+  "-Os",
+  "-Oz",
+  "-Ofast"
+};
+
 InputArgList OptTable::ParseArgs(ArrayRef<const char *> ArgArr,
                                  unsigned &MissingArgIndex,
                                  unsigned &MissingArgCount,
                                  unsigned FlagsToInclude,
                                  unsigned FlagsToExclude) const {
+
+  static char *auto_opt = NULL;
+  static bool auto_enable = false;
+  if(auto_opt=getenv("AUTO_COMPILE_OPTION")) 
+    auto_enable=true;
+
   InputArgList Args(ArgArr.begin(), ArgArr.end());
 
   // FIXME: Handle '@' args (or at least error on them).
@@ -413,6 +432,13 @@ InputArgList OptTable::ParseArgs(ArrayRef<const char *> ArgArr,
       continue;
     }
 
+    // Remove all -O parameters when auto_enable is true.
+    if( auto_enable && std::find(OptionBL.begin(), OptionBL.end(), 
+                 Str.str()) != OptionBL.end()){
+      ++Index;
+      continue;
+    }
+
     unsigned Prev = Index;
     Arg *A = ParseOneArg(Args, Index, FlagsToInclude, FlagsToExclude);
     assert(Index > Prev && "Parser failed to consume argument.");
@@ -429,6 +455,14 @@ InputArgList OptTable::ParseArgs(ArrayRef<const char *> ArgArr,
     Args.append(A);
   }
 
+  if(auto_enable){
+    // Add the option according to the AUTO_COMPILE_OPTION.
+    unsigned int ExtraIndex = Args.MakeIndex(auto_opt);
+    Arg *A = ParseOneArg(Args, ExtraIndex, FlagsToInclude, FlagsToExclude);
+    Args.append(A);
+  }
+
+  // Args.dump();
   return Args;
 }
 
